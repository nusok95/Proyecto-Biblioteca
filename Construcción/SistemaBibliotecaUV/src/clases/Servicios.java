/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clases;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 *
 * @author Gustavo
 */
public class Servicios {

    Connection connection;
    PreparedStatement preparedStatement;
    ResultSet resultSet;
    private static final char[] PASSWORD = "enfldsgbnlsngdlksdsgm".toCharArray();
    private static final byte[] SALT = {
        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,
        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public boolean login(String nombre, String password) {//GEN-FIRST:event_btnBuscarActionPerformed
        boolean b = false;
        try {
            connection = Conexion.getConnection();
            PreparedStatement x = connection.prepareStatement("SELECT * from usuario where nombre_usuario = ? and contraseña = ? limit 1");
            x.setString(1, nombre);
            x.setString(2, password);
            ResultSet rs = x.executeQuery();
            if(rs.next()){
                b = true;
                System.out.println(encrypt(password));
            }
           
            connection.close();
            x.close();
            rs.close();

        } catch (SQLException esql) {
            System.out.println(esql);
            System.out.println("Error al ejecutar el SQL");
        } catch (Exception ex) {
            System.out.println("No hay conexión");
        }
        return b;
    }
    
    public void registrarUsuario (String mat,String nombre,String apellidoPaterno, String apellidoMaterno,String correo, String telefono, int tipo, String calle, String colonia, String numero, String cp,
      int estado){
      try {
            connection = Conexion.getConnection();
            PreparedStatement x = connection.prepareStatement("INSERT INTO lector (id,nombre,apellido_paterno,apellido_materno,correo,telefono,tipo_usuario,calle,codigo_postal,"
                + "colonia,numero,estado) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
            x.setString(1, mat); x.setString(2, nombre);x.setString(3, apellidoPaterno);x.setString(4,apellidoMaterno);x.setString(5, correo);x.setString(6,telefono);x.setInt(7, tipo);x.setString(8, calle);x.setString(9, cp);
            x.setString(10, colonia);x.setString(11,numero);x.setInt(12, estado);
            x.executeUpdate();
            JOptionPane.showMessageDialog(null, "LECTOR AGREGADO");
            connection.close();
            x.close();
            

        } catch (SQLException esql) {
            System.out.println(esql);
            System.out.println("Error al ejecutar el SQL");
        } catch (Exception ex) {
            System.out.println("No hay conexión");
        }
  
    }
    
    public PreparedStatement buscarLector (String matricula){
       try {
            connection = Conexion.getConnection();
            PreparedStatement x = connection.prepareStatement("SELECT * from lector where id = ?");
            x.setString(1,matricula);
            ResultSet rs = x.executeQuery();
            if(rs.next()){
               return x;
            }
            connection.close();
            x.close();
            rs.close();

        } catch (SQLException esql) {
            System.out.println("Error al ejecutar el SQL");
        } catch (Exception ex) {
            System.out.println("No hay conexión");
        }
 
       return null;
    }
    
     public boolean confirmarExistenciaLector (String matricula){
      boolean bandera = false;
       try {
            connection = Conexion.getConnection();
            PreparedStatement x = connection.prepareStatement("SELECT * from lector where id = ?");
            x.setString(1,matricula);
            ResultSet rs = x.executeQuery();
            if(rs.next()){
               bandera = true;
            }
            connection.close();
            x.close();
            rs.close();

        } catch (SQLException esql) {
            System.out.println("Error al ejecutar el SQL");
        } catch (Exception ex) {
            System.out.println("No hay conexión");
        }
 
       return bandera;
    }
     
     public void actualizarLector(String mat,String nombre, String apellidoPaterno, String apellidoMaterno, String correo, String telefono, int tipo, String calle, String cp, String colonia, String numero,
      int estado){
       try {
            connection = Conexion.getConnection();
            PreparedStatement x = connection.prepareStatement("UPDATE lector set nombre=?, apellido_paterno=?,apellido_materno=?,correo=?,telefono=?,tipo_usuario=?,calle=?,codigo_postal=?,colonia=?,numero=?,estado=?  where id=?");
            x.setString(1, nombre);x.setString(2, apellidoPaterno);x.setString(3,apellidoMaterno);x.setString(4, correo);x.setString(5,telefono);x.setInt(6,tipo);
            x.setString(7, calle);x.setString(8,cp);x.setString(9, colonia);x.setString(10,numero);x.setInt(11, estado);x.setString(12, mat);
            x.executeUpdate();
            JOptionPane.showMessageDialog(null, "LECTOR ACTUALIZADO");
            connection.close();
            x.close();

        } catch (SQLException esql) {
            System.out.println("Error al ejecutar el SQL");
        } catch (Exception ex) {
            System.out.println("No hay conexión");
    
     }
     }
       
     
    
    
    
    
    private static String encrypt(String property) throws GeneralSecurityException, UnsupportedEncodingException {
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDEs");
        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));
        Cipher pbeCipher = Cipher.getInstance("PBEWithMD5AndDES");
        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));
        return base64Encode(pbeCipher.doFinal(property.getBytes("UTF-8")));
    }

    private static String base64Encode(byte[] bytes) {
        // NB: This class is internal, and you probably should use another impl
        return new BASE64Encoder().encode(bytes);
    }

    private static String decrypt(String property) throws GeneralSecurityException, IOException {
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");
        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));
        Cipher pbeCipher = Cipher.getInstance("PBEWithMD5AndDES");
        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));
        return new String(pbeCipher.doFinal(base64Decode(property)), "UTF-8");
    }

    private static byte[] base64Decode(String property) throws IOException {
        // NB: This class is internal, and you probably should use another impl
        return new BASE64Decoder().decodeBuffer(property);
    }
}